disclaimer. i have no idea what im talking about. but i still want to write these thoughts down.

assumption 0. we have 2^32 bits for "memory". 
  the bits stored come in contiguous chunks and are independent of machine. 
  namely 0110 is a 4 bit chunk representing the unsigned integer 3 no matter 
  where this chunk lies or on what machine.

assumption 1. there are 6x2 + 4 registers. 
  A0,A1 of size 1 bit
  B0,B1 of size 2 bits
  C0,C1 of size 4 bits
  D0,D1 of size 8 bits
  E0,E1 of size 16 bits
  F0,F1 of size 32 bits
  R0, R1, R2, R3 of size 32 bits

  the first 6x2 support the following operations:
  xor / or / and of J0,J1 into J0 or J1
  swap J0,J1
  incr / decr Ji
  iszr / isnz Ji 
  iseq, isnq J0 and J1

assumption 2. the programmer has a unique "type" called chunk. 
  a chunk needs 32 bits to represent the size of the chunk, 
  and another 32 bits to represent the beginning of the chunk.
  the programmer may request chunks of size x, for all 1 <= x <= 2^32.
  there is a built in function to check whether two chunks are equal.
  and a built in function to copy one chunk into another, when their sizes match.
